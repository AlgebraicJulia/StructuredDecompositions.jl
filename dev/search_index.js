var documenterSearchIndex = {"docs":
[{"location":"api/#Library-Reference","page":"Library Reference","title":"Library Reference","text":"","category":"section"},{"location":"api/","page":"Library Reference","title":"Library Reference","text":"Modules = [StructuredDecompositions, StructuredDecompositions.Decompositions, StructuredDecompositions.FunctorUtils, StructuredDecompositions.DecidingSheaves]","category":"page"},{"location":"api/#StructuredDecompositions.Decompositions.StrDecomp","page":"Library Reference","title":"StructuredDecompositions.Decompositions.StrDecomp","text":"Structrured decomposition struct     – think of these are graphs whose vertices are labeled by the objects of some category      and whose edges are labeled by SPANS in this category\n\n\n\n\n\n","category":"type"},{"location":"api/#StructuredDecompositions.Decompositions.StructuredDecomposition","page":"Library Reference","title":"StructuredDecompositions.Decompositions.StructuredDecomposition","text":"Structured decompositions\n\n\n\n\n\n","category":"type"},{"location":"api/#StructuredDecompositions.Decompositions.∫-Tuple{T} where T<:Catlab.ACSetInterface.ACSet","page":"Library Reference","title":"StructuredDecompositions.Decompositions.∫","text":"∫(G) has type Category whereas elements(G) has type Elements\n\n\n\n\n\n","category":"method"},{"location":"api/#StructuredDecompositions.Decompositions.𝐃","page":"Library Reference","title":"StructuredDecompositions.Decompositions.𝐃","text":"Given a structured decomposition d: FG → C and a sheaf F: C → S^{op} w.r.t to the decompositon topology,  we can make a structured decomposition valued in S^{op} which has the relevant data by composition: F ∘ d : FG → C → S^{op}. This is done by first lifting the sheaf to a functor 𝐃_f: 𝐃C → 𝐃(S^{op}) between categories of structured decompositions. \n\n\n\n\n\n","category":"function"},{"location":"api/#StructuredDecompositions.DecidingSheaves.adhesion_filter-Tuple{Tuple, StructuredDecompositions.Decompositions.StructuredDecomposition}","page":"Library Reference","title":"StructuredDecompositions.DecidingSheaves.adhesion_filter","text":"Filtering algorithm.  Note: we are assuming that we only know how to work with FinSet(Int) !\n\nINPUT: a Finset^{op}-valued structured decomposition d : FG → Span Finset^{op}            (which is expected to be in co-decomposition form;              i.e. as a diagram d : FG → Cospan Finset )        and an indexed span ( (ℓ, r), ( d(ℓ), d(r) ) ) in d            (i.e a pair consisting of span (ℓ, r) in ∫G and its image under d)\n\nOUTPUT: a structured decomposition obtained by replacing the span de in d          by the span obtained by projecting the pullback of de (i.e. taking images)\n\n\n\n\n\n","category":"method"},{"location":"api/#StructuredDecompositions.DecidingSheaves.decide_sheaf_tree_shape","page":"Library Reference","title":"StructuredDecompositions.DecidingSheaves.decide_sheaf_tree_shape","text":"Solve the decision problem encoded by a sheaf.  The algorithm is as follows:    compute on each bag (optionally, if the decomposition of the solution space                         is already known, then it can be passed as an argument),   compute composites on edges,    project back down to bags   answer (providing a witness)     \"no\" if there is an empty bag;      \"yes\" otherwise.\n\n\n\n\n\n","category":"function"},{"location":"#StructuredDecompositions.jl","page":"StructuredDecompositions.jl","title":"StructuredDecompositions.jl","text":"","category":"section"},{"location":"","page":"StructuredDecompositions.jl","title":"StructuredDecompositions.jl","text":"CurrentModule = StructuredDecompositions","category":"page"},{"location":"","page":"StructuredDecompositions.jl","title":"StructuredDecompositions.jl","text":"Structured decompositions!","category":"page"}]
}
