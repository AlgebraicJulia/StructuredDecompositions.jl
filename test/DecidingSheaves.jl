module TestDecidingSheaves

using Test
using PartialFunctions
using MLStyle

using ..Decompositions
using ..DecidingSheaves
using ..FunctorUtils

using Catlab.Graphs
using Catlab.ACSetInterface
using Catlab.CategoricalAlgebra
using Catlab.Graphics

############################
#     EXAMPLE INSTANCE str decomp
############################
H‚ÇÅ = @acset Graph begin
  V = 3
  E = 2
  src = [1, 2]
  tgt = [2, 3]
end

#to_graphviz(H‚ÇÅ)

#adhesion 1,2
H‚ÇÅ‚ÇÇ = @acset Graph begin
  V = 2
end

#bag 2
H‚ÇÇ = @acset Graph begin
  V = 4
  E = 3
  src = [1, 2, 3]
  tgt = [2, 3, 4]
end


G‚Çõ = @acset Graph begin
  V = 2
  E = 1
  src = [1]
  tgt = [2]
end

Œì‚Çõ‚Å∞ = Dict(1 => H‚ÇÅ, 2 => H‚ÇÇ, 3 => H‚ÇÅ‚ÇÇ)
Œì‚Çõ = FinDomFunctor(
  Œì‚Çõ‚Å∞,
  Dict(
    1 => ACSetTransformation(Œì‚Çõ‚Å∞[3], Œì‚Çõ‚Å∞[1], V=[1, 3]),
    2 => ACSetTransformation(Œì‚Çõ‚Å∞[3], Œì‚Çõ‚Å∞[2], V=[4, 1]),
  ),
  ‚à´(G‚Çõ)
)
smallSD = StrDecomp(G‚Çõ, ‚à´(G‚Çõ), Œì‚Çõ)


"""
An example: graph colorings
"""
#an H-coloring is a hom onto H
K‚ÇÇ = @acset Graph begin
  V = 2
  E = 1
  src = [1]
  tgt = [2]
end

struct Coloring <: Sheaf
  n     #the target graph
  func  #the function mappgin opens to lists of homs from G to K_n
end

#construct an n-coloring
Coloring(n) = Coloring(n, g -> homomorphisms(g, complete_graph(Graph, n)) )
#make it callable
(c::Coloring)(X::Graph) = FinSet(c.func(X)) # given graph homos #f: G‚ÇÅ ‚Üí G‚ÇÇ get morphism col(G‚ÇÇ) ‚Üí col(G‚ÇÅ) by precomposition: take each Œª‚ÇÇ ‚àà col(G‚ÇÇ) to hf ‚àà col(G)
function (c::Coloring)(f::ACSetTransformation)  
  (G‚ÇÅ, G‚ÇÇ)   = (dom(f), codom(f)) 
  (cG‚ÇÅ, cG‚ÇÇ) = (c(G‚ÇÅ), c(G‚ÇÇ))
  FinFunction( Œª‚ÇÇ -> compose(f,Œª‚ÇÇ), cG‚ÇÇ, cG‚ÇÅ ) #note the contravariance
end

#skeletal_coloring(n) = skeleton ‚àò (Coloring(n))

ùêÉ_col = (ùêÉ $ skeleton) ‚àò (x -> ùêÉ(Coloring(3), x, CoDecomposition))
#Now you can use this functor to conert a structured decomposition of graphs into a structured decomposition of the solution spaces on those graphs. 
#coloring_decomp = ùêÉ_col(smallSD)
three_d = ùêÉ_col(smallSD)
to_graphviz(graph(three_d.domain))
shape(three_d) == three_d.domain
diagram(three_d) == three_d.diagram
#graph(three_d.domain)
#three_d = ùêÉ(skeleton, coloring_decomp)
bags(three_d)
adhesions(three_d)
as = adhesionSpans(three_d)
#trial =  map(FinFunction, as[1])

sp = as[1] 
#asd = FinFunction(sp‚ÇÅ[1]) 
pullback(sp[1], sp[2])

end



#=
f‚ÇÅ = ACSetTransformation(H‚ÇÅ‚ÇÇ, H‚ÇÅ, V=[1, 3])
f‚ÇÇ = ACSetTransformation(H‚ÇÅ‚ÇÇ, H‚ÇÇ, V=[4, 1])
fs = [f‚ÇÅ, f‚ÇÇ]
cfs = map(Coloring(3), fs)
codom(cfs[1]) == codom(cfs[2])
scfs = map(skeleton, cfs)
codom(scfs[1]) == codom(scfs[2])
dom(scfs[1])
pullback(scfs[1], scfs[2])
=#


#=
sc3 = skeletal_coloring(3)

cH‚ÇÅ = collect(Coloring(3)(H‚ÇÅ))
q = cH‚ÇÅ[1]
dom(q)
f = ACSetTransformation(H‚ÇÅ‚ÇÇ, H‚ÇÅ, V=[1, 3])
compose(f,q)
vertices(H‚ÇÅ‚ÇÇ)
cf = Coloring(3)(f)
scf = skeleton(cf)
=#
#K = Coloring(3)
#coloring_map = K(ACSetTransformation(Œì‚Çõ‚Å∞[3], Œì‚Çõ‚Å∞[1], V=[1, 3]))
#all(Œ∫ -> coloring_map(Œ∫) ‚àà K(Œì‚Çõ‚Å∞[3]), K(Œì‚Çõ‚Å∞[1]))

#skel_map = skeleton(coloring_map)
#all(Œ∫ -> skel_map(Œ∫) ‚àà skeleton(K(Œì‚Çõ‚Å∞[3])), skeleton(K(Œì‚Çõ‚Å∞[1])))

#(c::Coloring)(f::ACSetTransformation) = ycol -> compose(f, ycol)
#FinFunction(c::Coloring, f::ACSetTransformation) = FinFunction(c(f), c(codom(f)))

#=
adhesionSpans(smallSD)
littlespan = adhesionSpans(smallSD)[1]
colspan = map(Coloring(3), littlespan)
codom(colspan[1]) == codom(colspan[2])
=#
#limit(colspan)

#=
c‚ÇÅ = Coloring(3)(H‚ÇÅ) 
c‚ÇÅ‚ÇÇ = Coloring(3)(H‚ÇÅ‚ÇÇ) 
ff = Coloring(3)(ACSetTransformation(H‚ÇÅ‚ÇÇ, H‚ÇÅ, V=[1, 3]))
all(x -> ff(x) ‚àà  c‚ÇÅ‚ÇÇ, c‚ÇÅ)

s‚ÇÅ  = FinSet(c‚ÇÅ)
s‚ÇÅ‚ÇÇ = FinSet(c‚ÇÅ‚ÇÇ)
=#
#lift the sheaf to a functor between categories of sructured decompositions 

#=
K‚ÇÇ = @acset Graph begin
  V = 2
  E = 1
  src = [1]
  tgt = [2]
end

spanCat = ‚à´(K‚ÇÇ) #the category x <- e -> y

function mk_span_functor(‚Ñì‚ÇÅ, ‚Ñì‚ÇÇ)
  FinDomFunctor(
    Dict(1 => dom(‚Ñì‚ÇÅ), 2 => dom(‚Ñì‚ÇÇ), 3 => codom(‚Ñì‚ÇÅ)),
    Dict(1 => ‚Ñì‚ÇÅ, 2 => ‚Ñì‚ÇÇ),
    spanCat 
  )
end

=#






#=
pb = pullback( sp[1], sp[2] )

ob(pb)
œÄ‚ÇÅ, œÄ‚ÇÇ = legs(pb)

map(g -> homomorphisms(g, K‚ÇÇ), bags(smallSD))
=#




#=
function myfunc(a,b) 
  x -> @match x begin
    1 => a
    2 => b
  end
end 

three = FinSet(3)
two = FinSet(2)
four = FinSet(4)
f‚ÇÅ = FinFunction(myfunc(2,3), two, three)
f‚ÇÇ = FinFunction(myfunc(2,4), two, four)
pushout(f‚ÇÅ, f‚ÇÇ)

s = FinSet(["a", "b", "d"])

m = FinSet([1,2])

t = FinSet(["c", "b", "d"])


ms = FinFunction(myfunc("b", "d")  , m, s)
mt = FinFunction(myfunc("b", "d") , m, t)

length(s)
dom(ms)
skeleton(ms)

pushout(skeleton(ms), skeleton(mt))

=#

#=

#ms = FinFunction(Dict(1 => "b", 2 => "d"), sl)
ms = FinFunction(Œ±, m, s)
dom(ms) == m

codom(ms)
dom(ms) == m
mt = FinFunction(Dict(1 => "b'", 2 => "d'"))
dom(ms)
m
dom(ms) == dom(mt)


FinSet([1,2]) == FinSet([1,2])
pushout([ms, mt])

homomorphisms(H‚ÇÅ‚ÇÇ, H‚ÇÅ)
homomorphisms(H‚ÇÅ‚ÇÇ, H‚ÇÅ)
FinSet(homomorphisms(H‚ÇÅ‚ÇÇ, H‚ÇÅ)) == FinSet(homomorphisms(H‚ÇÅ‚ÇÇ, H‚ÇÅ))
#pullback(trial)
#pullback(s‚ÇÅ[1])
#trying out pullbacks


s‚ÇÅ = FinSet(5)
s‚ÇÇ = FinSet(4)
s  = FinSet(3)
f‚ÇÅ = FinFunction([1,1,2,2,3], s‚ÇÅ, s)
f‚ÇÇ = FinFunction([2,3,1,2], s‚ÇÇ, s)
#œÉ  = Span(f‚ÇÅ, f‚ÇÇ) 
‚Ñì  = pullback([f‚ÇÅ,f‚ÇÇ])

=#

#the functor
#=
D‚ÇÄ = Dict(1 => FinSet(3), 2 => FinSet(3), 3 => FinSet(4), 4 => FinSet(1), 5 => FinSet(2))
D‚ÇÅ = Dict(
      1 => FinFunction([3], D‚ÇÄ[4], D‚ÇÄ[1]), 
      2 => FinFunction([1,2], D‚ÇÄ[5], D‚ÇÄ[2]),
      3 => FinFunction([4], D‚ÇÄ[4], D‚ÇÄ[2]),
      4 => FinFunction([1,5], D‚ÇÄ[5], D‚ÇÄ[3])
    )
D = FinDomFunctor(D‚ÇÄ, D‚ÇÅ, ‚à´(G))
=#
#the structured decomposition
#####################